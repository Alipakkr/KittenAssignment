import { createSlice } from "@reduxjs/toolkit";
import { request } from "../../api/request"; // Importing API request function

// Creating a leaderboard slice using createSlice from Redux Toolkit
const leaderboardSlice = createSlice({
  name: "leaderboard",
  initialState: {
    loading: false, // Initial loading state
    users: [], // Initial array to store user data
  },
  reducers: {
    // Reducer function to update users state with fetched data
    getUsers(state, action) {
      return { ...state, users: action.payload };
    },
    // Reducer function to update loading state
    setLoading(state, action) {
      return { ...state, loading: action.payload };
    },
  },
});

// Exporting the reducer function generated by createSlice
export default leaderboardSlice.reducer;

// Exporting action creators
export const { getUsers, setLoading } = leaderboardSlice.actions;

// Thunk action creator to fetch users from the server
export function fetchUsers() {
  return async function fetchUsersThunk(dispatch, getState) {
    dispatch(setLoading(true)); // Dispatching setLoading action with true

    // Making a request to fetch users from the server
    let response = await request("GET", "/users/fetchUsers");

    // If request is successful, dispatch getUsers action with fetched data
    if (response.success) {
      dispatch(getUsers(response.data));
    }

    dispatch(setLoading(false)); // Dispatching setLoading action with false after request is completed
  };
}
